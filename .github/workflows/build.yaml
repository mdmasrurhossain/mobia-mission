name: Build and Test Artifact

on:
  push:
  pull_request:

env:
  GCP_PROJECT_NAME: mobia-mission
  PROD_NAMESPACE: mobia-prod
  STAGING_NAMESPACE: mobia-staging
  FEATURE_NAMESPACE: mobia-feature
  GKE_CLUSTER_NAME_STAGING: staging
  GKE_CLUSTER_NAME_PROD: prod
  GKE_LOCATION: us-central1
  IMAGE_REPOSITORY: "mobia-assignment"
  IMAGE_APP_NAME: "mobia-flask"
  USE_GKE_GCLOUD_AUTH_PLUGIN: True  


jobs:
  lint_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          pip3 install flake8==4.0.1
          pip3 install flake8-html==0.4.1 Jinja2==3.0

      - name: Run linting tests
        run: flake8 --format=html --htmldir=flake8_reports/

      - name: Run linting tests
        run: flake8 --format=html --htmldir=flake8_reports/

      - name: Upload linting reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: flake8_reports
          path: flake8_reports/

  pytest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          pip install pytest-html
          pip install -r requirements.txt

      - name: Run pytest
        run: pytest --html=pytest_reports/pytest-report.html --self-contained-html

      - name: Upload pytest reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: pytest_reports
          path: pytest_reports/

  build:
    runs-on: ubuntu-latest
    needs: [lint_test, pytest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.SERVICE_ACCOUNT_KEY }}

      - name: Get version SHA
        run: |
          echo "VERSION=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_ENV
    
      - name: Build and push API docker image to Google Cloud Platform
        uses: docker/build-push-action@v2
        with:
          push: true
          context: "."
          file: "Dockerfile"
          tags: |
            gcr.io/${{ env.IMAGE_REPOSITORY }}/${{ env.IMAGE_APP_NAME }}:${{ env.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max